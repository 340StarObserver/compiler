58
1 1 id (_|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z).(0|1|2|3|4|5|6|7|8|9|_|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z)*
3 1 integer 0|(1|2|3|4|5|6|7|8|9).(0|1|2|3|4|5|6|7|8|9)*
4 1 LCurlyBrace {
5 1 RCurlyBrace }
8 1 SEnd ;
9 1 add +
10 1 minus -
12 1 division /
13 5 ADD +.=
14 5 MINUS -.=
16 5 DIVISION /.=
17 1 BinAnd &
19 1 BinXor ^
20 5 LogicAnd &.&
22 1 LogicNot !
23 1 assign =
24 1 gt >
25 1 lt <
26 5 eq =.=
27 5 gte >.=
28 5 lte <.=
29 10 include #. .i.n.c.l.u.d.e
30 10 ifndef #. .i.f.n.d.e.f
31 10 define #. .d.e.f.i.n.e
32 10 endif #. .e.n.d.i.f
33 10 main m.a.i.n
34 10 ns n.a.m.e.s.p.a.c.e
35 10 using u.s.i.n.g
36 10 class c.l.a.s.s
37 10 struct s.t.r.u.c.t
38 10 union u.n.i.o.n
39 10 enum e.n.u.m
40 10 private p.r.i.v.a.t.e
41 10 public p.u.b.l.i.c
42 10 static s.t.a.t.i.c
43 10 const c.o.n.s.t
44 10 void v.o.i.d
45 10 bool b.o.o.l
46 10 char c.h.a.r
47 10 int i.n.t
48 10 long l.o.n.g
49 10 float f.l.o.a.t
50 10 double d.o.u.b.l.e
51 10 region :.:
52 10 ~ ~
53 10 return r.e.t.u.r.n
54 10 if i.f
55 10 else e.l.s.e
56 10 do d.o
57 10 while w.h.i.l.e
58 10 for f.o.r